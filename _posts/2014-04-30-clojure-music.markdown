---
layout: post
title:  "(def awesome (+ clojure music))"
date:   2014-04-30 16:06:19
categories: clojure
image: http://placehold.it/300x200&text=map+reduce
image_src: http://placehold.it
---

<br>
Who said that learning how to code in a new language must be the same every time?
Not me, and I would like to share interesting way to begin journey with Clojure and it's ecosystem.
It's not detailed technical tutorial with code, rather guide through external materials and tools.
<br>
The talk is about coding music. More specifically about preparing environment for audio generation and experimenting with sounds, which leads to quick learning as side effect.

If you never before had contact with music generated by code, you should try to listen this:

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/125084411&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_artwork=true"></iframe>
<br>

Ok, it may seems a little bit strange and not like 'real coding'. That's why we need some explenation form Sam Aaron form Meta-Ex, authors of single above.
Talk will take forty minutes but believe me, it's totally worth that time. It covers Overtone, Clojure's library for audio generation.

[Link to '**Programming Music with Overtone**'](http://youtu.be/imoWGsipe4k?t=1m)

Thus it's generating music using programming language and external device, which are also configured and controlled by your code.
Overtone is very robust and have many possible applications. For instance, [Joshep Wilk](https://github.com/josephwilk/musical-creativity)
uses Overtone to create music compositions based on artificial intelligence techniques, without being explicitly programmed.
Awesome, right? However, it's story for another article.

In summary, if presented idea appeal to you, probably you would like to do it by yourself.
But before we could type words to make sounds, we need prepare environment (libraries, editors and so on)
and what obvious, learn at least fundamentals of Clojure.
For me, thought that I'll be able to do create my own sounds, was big motivation and chained me to the keyboard for a long time.

After watching several talks from [**ClojureTV**](http://www.youtube.com/user/ClojureTV) youtube channel, you could notice that a lot of speaker use Emacs for live coding.
Yup. Emacs.
<br>
<br>
I was Vim user for some time, after that switched to Sublime and now Atom editor.
So I'm not stubborn user of specific editor, but I would never taught about using Emacs with it's complicated keys-bindings.
Until I saw almost native Clojure integration and excellent responsiveness, with is crucial when working with REPL.
By responsiveness I mean having code editing and code execution in single environment.
<br>
Light Table has similar functionality and I thinks that it's great for single experiments with Clojure syntax, especially at the beginning of learning process.
When inline evaluation of expressions provide immediate feedback for typed code.
But at present moment, Emasc is more mature and convenient for more advanced tasks.
<br>
Of course there are other IDE plugins and tools like Gorilla REPL, but I decided to stick to currently most used solution.

<div class="row" data-equalizer>
  <div class="large-6 columns">
    <img src="/img/my_overtone.png" class="th" data-equalizer-watch />
  </div>
  <div class="large-6 columns">
    <img src="/img/light_table.png" class="th" data-equalizer-watch />
  </div>
</div>
<br>
Very surprise for me was [**'Clojure for the Brave and Trure'**](http://www.braveclojure.com/) tutorial.
Except being clear and really engaging introduction to language,
it provides tutorials guides for [starting](http://www.braveclojure.com/basic-emacs/) with Emacs and
[integrating](http://www.braveclojure.com/using-emacs-with-clojure/) it with Clojure.
<br>
<br>
As soon as you will finish [first lesson](http://www.braveclojure.com/do-things/), get familiar with [Leiningen](http://leiningen.org/) project automation tool.
It takes some time, but again, it's just clojure tool so expect it to be easy.
Just after that, you are ready to jump right into [Overtone](https://github.com/overtone/overtone/wiki).
Then you will discover how important was to choose editor with excellent REPL integration.
Selecting and evaluating parts of code, will allow you to make changes in sound, on the fly, without need to stop the music.
After playing with it for a while, a discovered how much I learned by the way:
Emacs was no longer wired editor, managing projects with lein was easy and I had basic knowledge of best Lisp dialect.
<br>
<br>
The clue of this post is to encourage you, to try find out your exiting way to learn things.
<br>
Maybe your like visuals more than sounds? then try [Quil](https://github.com/quil/quil) Clojures wrapper for Processing.
Do you like video games? what could be better way to learn language than making your own game.
As long as it provides big amount of fun and motivation it's awesome way to learn.
<br>
Happy hacking!
